# Copyright 2016 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""A record of datasets that can be used by the training pipeline.

All data lives under a TTL, and so must be periodically regenerated by hand.
"""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

from collections import namedtuple
import os

#internal importss
import tensorflow as tf

DATA_DIR = os.path.join("")
DATA_DIR_PERM = ""

DATASET = namedtuple("dataset", [
    "path_train", "path_test",
    "samples_per_second", "num_qualities", "num_samples",
    "features"
])
# All dataset names are in caps, pylint: disable=invalid-name
# 4seconds * 16khz = 64000.
NUM_SAMPLES_16k = 64000
# 4seconds * 8khz = 32000.
NUM_SAMPLES_8k = 32000

NSYNTH_TRAIN = DATASET(
    samples_per_second=16000,
    path_train=os.path.join(DATA_DIR_PERM, "nsynth_rc4-train.tfrecord"),
    path_test=os.path.join(DATA_DIR_PERM, "nsynth_rc4-valid.tfrecord"),
    num_samples=NUM_SAMPLES_16k,
    num_qualities=10,
    features={
        "velocity": tf.FixedLenFeature([1], tf.int64),
        "pitch": tf.FixedLenFeature([1], tf.int64),
        "sample_rate": tf.FixedLenFeature([1], tf.int64),
        "audio": tf.FixedLenFeature([NUM_SAMPLES_16k], tf.float32),
        "instrument": tf.FixedLenFeature([1], tf.int64),
        "instrument_family": tf.FixedLenFeature([1], tf.int64),
        "instrument_source": tf.FixedLenFeature([1], tf.int64),
        "qualities": tf.FixedLenFeature([10], tf.int64),
    })


NSYNTH_TEST = DATASET(
    samples_per_second=16000,
    path_train=os.path.join(DATA_DIR_PERM, "nsynth_rc4-train.tfrecord"),
    path_test=os.path.join(DATA_DIR_PERM, "nsynth_rc4-test.tfrecord"),
    num_samples=NUM_SAMPLES_16k,
    num_qualities=10,
    features={
        "velocity": tf.FixedLenFeature([1], tf.int64),
        "pitch": tf.FixedLenFeature([1], tf.int64),
        "sample_rate": tf.FixedLenFeature([1], tf.int64),
        "audio": tf.FixedLenFeature([NUM_SAMPLES_16k], tf.float32),
        "instrument": tf.FixedLenFeature([1], tf.int64),
        "instrument_family": tf.FixedLenFeature([1], tf.int64),
        "instrument_source": tf.FixedLenFeature([1], tf.int64),
        "qualities": tf.FixedLenFeature([10], tf.int64),
    })


DATASET_REGISTRY = {
    "NSYNTH_EVAL": NSYNTH_EVAL,
    "NSYNTH_TEST": NSYNTH_TEST,
}

# FFT Specgram Shapes
SPECGRAM_REGISTRY = {
    (nfft, hop): shape for nfft, hop, shape in zip(
        [256, 256, 512, 512, 1024, 1024],
        [64, 128, 128, 256, 256, 512],
        [[129, 1001, 2], [129, 501, 2], [257, 501, 2],
         [257, 251, 2], [513, 251, 2], [513, 126, 2]])
}
# All dataset names are in caps, pylint: enable=invalid-name
def change_dir(full_path, new_dir):
  base = os.path.basename(full_path)
  return os.path.join(new_dir, base)


def get_dataset(dataset_name, data_dir=None):
  dataset = DATASET_REGISTRY[dataset_name]
  if data_dir:
    d_dict = dataset.__dict__
    d_dict["path_train"] = change_dir(d_dict["path_train"], data_dir)
    d_dict["path_test"] = change_dir(d_dict["path_test"], data_dir)
    dataset = DATASET(**d_dict)
  return dataset
